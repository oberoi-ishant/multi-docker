# So with docker-compose we can directly use service names
# to tell the url/path like client:3000 running in the container.
# remember in docker-compose for all services defined a default network
# is created.
# server client:3000 means client is name of service defined in
# docker-compose and it listens on 3000(create-react-app)
# upsteam client means name our upstream service as client.
upstream client {
  server client:3000;
}

# upsteam api means name our upstream service as api.
# server api:3000 means api is name of service defined in
# docker-compose and it listens on 5000
upstream api {
  server api:5000;
}

server {
  listen 80;

  location / {
    proxy_pass http://client;
  }

  # this is for dev purpose only. You dont need this in production.
  # to solve the socket error you see in console, if you skip this
  # and start app.
  # error: WebSocket connection to 'ws://localhost:3050/sockjs-node/289/vvdbszzj/websocket' failed: Error during WebSocket handshake: Unexpected response code: 400
  # just add this config. This will allow a scoket connection between
  # running react server and nginx so that when the react app  source code
  # changes our browser reloads automatically
  location /sockjs-node {
    proxy_pass http://client;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }

  location /api {
    # rewrite mean for urls like /api/values/all chanhe it to /values/all
    # strip of the /api part. Like a regex.
    # $1 is whatever is matched. like a regex group.
    # break means do no apply any other rewrite rule.
    rewrite /api/(.*) /$1 break;
    proxy_pass http://api;
  }
}
