sudo: required
services:
  - docker

# specify build process to build the react app
# you can also add similar command to build other part like server and worker
# then use the builds to run the tests on them.
# here we have tests only in react app.
before_install:
  - docker build -t ishantoberoi/client-react-test -f ./client/Dockerfile.dev ./client

# here is  any script exits with status code other than 0
# travis will assume build failed.
# exit status 0 is ... everything OK and we want to exit.
# exit status non-zero mean some error
# Using the command with -e CI=true as there is some issue with jest
# we do not get the exit status 0 after the run test is completed.
script:
  - docker run -e CI=true ishantoberoi/client-react-test npm run test

after_success:
  - docker build -t ishantoberoi/multi-client ./client
  - docker build -t ishantoberoi/multi-server ./server
  - docker build -t ishantoberoi/multi-worker ./worker
  - docker build -t ishantoberoi/multi-nginx ./nginx

# login to docker CLI
# go to your repo on travis ci https://travis-ci.org/github/oberoi-ishant/multi-docker
# settings - environment variables
# create two DOCKER_ID and DOCKER_PASSWORD and add their values.
# login with below command onto docker from travis ci
# so echo will take your value from env variable and emit it to stdin with the | command
# this is how we login to docker in a single command.
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

# Take the production images built above and push them to docker hub
  - docker push ishantoberoi/multi-client
  - docker push ishantoberoi/multi-server
  - docker push ishantoberoi/multi-worker
  - docker push ishantoberoi/multi-nginx


# app address http://mutlidocker-env.eba-6yudpi3u.us-east-2.elasticbeanstalk.com/
# AWS_ACCESS_KEY and AWS_SECRET_KEY configured in travis as environement
# variables https://travis-ci.org/github/oberoi-ishant/multi-docker/settings
# for security reasons as our repository on github is public.
# Below is how elasticbeanstalk page heading will look like on aws. From this:
# All Applications  mutli-docker  MutliDocker-env  Environment ID: e-qicwbmdpig, URL: MutliDocker-env.eba-6yudpi3u.us-east-2.elasticbeanstalk.com
# app -> app name (docker-react-practice)
# env -> app env name (DockerReactPractice-env)
# bucket_name -> aws - serives - s3 - name for your region elasticbeanstalk-us-east-2
# bucket_path: your app name in the bucket

# Now elasticBeanstalk will pick up all configuration from
# Dockerrun.aws.json file and start deployment.
deploy:
  edge: true
  provider: elasticbeanstalk
  region: "us-east-2"
  app: multi-docker
  env: MutliDocker-env
  bucket_name: elasticbeanstalk-us-east-2-041151477266
  bucket_path: "docker-multi"
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
  on:
    branch: master
